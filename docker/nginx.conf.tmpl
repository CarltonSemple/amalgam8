# AUTO-generated by Service Proxy -- DO NOT MODIFY!

user  root;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    {{range .Proxies}}{{range .Versions}}
    upstream {{.UpstreamName}} { {{range .Upstreams}}
        server {{.}};{{end}}
    }
    {{end}}{{end}}

    lua_package_path '/lua/?.lua;;';
    init_by_lua_block {
        splib = require "splib"
    }

    server {
        server_name __SERVICE_NAME__;
        listen {{.Port}};
        {{range .Proxies}}
        location /{{.ServiceName}}/ {
            set $target nil;

            access_by_lua '
                {{range .Rules}}
                {{with .Source}}
                if "__SERVICE_NAME__" == "{{.}}" then
                {{end}}
                    local header = ngx.req.get_headers()["{{$.ReqTrackingHeader}}"]
 	                if header then
                       local m, err = ngx.re.match(header, "{{.Pattern}}", "o")
                       if m then
                           {{if gt .DelayProbability 0.0}}
                           {{if lt .DelayProbability 1.0}}
                           if math.random() < {{.DelayProbability}} then
                              ngx.sleep({{.Delay}})
                           end
                           {{else}}
                           ngx.sleep({{.Delay}})
                           {{end}}
                           {{end}}

                           {{if gt .AbortProbability 0.0}}
                           {{if lt .AbortProbability 1.0}}
                           if math.random() < {{.AbortProbability}} then
                              ngx.exit({{.ReturnCode}})
                           end
                           {{else}}
                           ngx.exit({{.ReturnCode}})
                           {{end}}
                           {{end}}
                       end
                    end
                 end
                {{end}}
                ngx.var.target = splib.get_target("{{.ServiceName}}", "{{.VersionDefault}}", {{.VersionSelectors}})
            ';
            proxy_pass $target;
        }
        {{end}}
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '{'
                      '"message":"$request $status",'
                      '"module":"NGINX",'
                      '"upstream_addr":"$upstream_addr",'
                      '"remote_addr":"$remote_addr",'
                      '"request":"$request",'
                      '"status":"$status",'
                      '"http_referer":"$http_referer",'
                      '"http_user_agent": "$http_user_agent",'
                      '"http_x_forwarded_for":"$http_x_forwarded_for",'
                      '"timestamp_in_ms":"$msec",'
                      '"request_time":"$request_time",'
                      '"upstream_response_time":"$upstream_response_time",'
                      '"http_{{.LogReqTrackingHeader}}" : "$http_{{.LogReqTrackingHeader}}",'
                      '"src": "$server_name",'
                      '"dst": "$proxy_host"'
                      '}';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
