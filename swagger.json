{
  "swagger" : "2.0",
  "info" : {
    "title" : "Controller API for Amalgam8",
    "description": "The controller monitors the registry and updates the sidecar configuration accordingly. It provides APIs to the developer for configuring rules for request routing, fault injection, etc. These rules are then translated and sent to the sidecars belonging to the application.",
    "version" : "0.1"
  },
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json", "text/plain" ],
  "paths" : {
    "/health" : {
      "parameters" : [ ],
      "get" : {
        "tags" : [ ],
        "summary" : "Status of the controller",
        "description" : "Returns status of the controller",
        "responses" : {
          "200" : {
            "description" : "Controller is healthy"
          },
          "503": {
            "description" : "Controller is unhealthy"
          }
        }
      }
    },
    "/v1/poll" : {
      "parameters" : [ ],
      "post" : {
        "tags" : [ ],
        "summary" : "Poll for changes in registries",
        "description" : "Performs a poll of the registry for each registered tenant and checks for changes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully polled registries for all tenants"
          },
          "500" : {
            "description" : "Failed to poll registries for one or more tenants"
          }
        }
      }
    },
    "/v1/tenants" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Register a tenant",
        "description" : "Registers a tenant with the controller",
        "parameters" : [
          {
            "name": "tenant",
            "in": "body",
            "description": "Tenant information",
            "schema": {
              "$ref": "#/definitions/tenant"
            },
            "required": true
          }
        ],
        "responses" : {
          "201" : {
            "description" : "Tenant registered"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "409" : {
            "description" : "Tenant already registered"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },
    "/v1/tenants/{id}" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        }
      ],
      "get" : {
        "tags" : [ ],
        "summary" : "Credentials and configuration of a tenant",
        "description" : "Returns the credentials and configuration of a tenant",
        "responses" : {
          "200" : {
            "description" : "Tenant information",
            "schema" : {
              "$ref" : "#/definitions/tenant"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Update tenant information",
        "description" : "Updates the credentials and configuration of a tenant",
        "parameters" : [
          {
            "name": "tenant_info",
            "in": "body",
            "description": "Information to update",
            "schema": {
              "$ref": "#/definitions/tenant"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Tenant info successfully updated"
          },
          "400" : {
            "description" : "Malformed JSON in request"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "delete" : {
        "tags" : [ ],
        "summary" : "Unregisters a tenant",
        "description" : "Unregisters a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Tenant successfully deleted"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },

    "/v1/tenants/{id}/nginx" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        }
      ],
      "get" : {
        "produces" : [ "text/plain" ],
        "tags" : [ ],
        "summary" : "Proxy configuration of a tenant",
        "description" : "Returns the proxy configuration for a given tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Proxy configuration of tenant"
          },
          "204" : {
            "description" : "No configuration changes"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "500" : {
            "description" : "Error generating configuration"
          },
          "503" : {
            "description" : "Error communicating with external service"
          }
        }
      }
    },

    "/v1/tenants/{id}/versions/{service}" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        },
        {
          "name": "service",
          "in": "path",
          "description": "Service Name",
          "type": "string",
          "required": true
        }
      ],
      "get" : {
        "tags" : [ ],
        "summary" : "Returns the service version filter for a tenant",
        "description" : "Returns the version filter for a tenant for a service",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved version filter",
            "schema" : {
              "$ref" : "#/definitions/version"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Create a service version filter for a tenant",
        "description" : "Creates a version filter for a tenant for a service",
        "parameters" : [
          {
            "name": "version",
            "in": "body",
            "description": "New version filter for tenant",
            "schema": {
              "$ref": "#/definitions/version"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully created version filter"
          },
          "400" : {
            "description" : "Missing or invalid JSON"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "delete" : {
        "tags" : [ ],
        "summary" : "Delete the service version filter for a tenant",
        "description" : "Deletes the service version filter for a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted version filter"
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    }
  },
  "definitions" : {
    "tenant" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of tenant"
        },
        "port" : {
          "type" : "integer",
          "description" : "NGINX port"
        },
        "load_balance" : {
          "type" : "string",
          "description" : "Load balancing algorithm for tenant"
        },
        "req_tracking_header" : {
          "type" : "string",
          "description" : "Tracking header for tenant"
        },
        "credentials" : {
          "$ref" : "#/definitions/credentials"
        },
        "filters" : {
          "$ref" : "#/definitions/filter"
        }
      }
    },
    "credentials" : {
      "properties" : {
        "kafka" : {
          "$ref" : "#/definitions/kafka"
        },
        "registry" : {
          "$ref" : "#/definitions/registry"
        }
      }
    },
    "registry" : {
      "properties" : {
        "url" : {
          "type" : "string",
          "description" : "url for registry"
        },
        "token" : {
          "type" : "string",
          "description" : "token for registry"
        }
      }
    },
    "kafka" : {
      "properties" : {
        "api_key" : {
          "type" : "string",
          "description" : "token for kafka REST API"
        },
        "admin_url" : {
          "type" : "string",
          "description" : "kafka admin url"
        },
        "rest_url" : {
          "type" : "string",
          "description" : "kafka REST url"
        },
        "brokers" : {
          "type" : "array",
          "description" : "kafka brokers",
          "items" : {
            "type" : "string"
          }
        },
        "user" : {
          "type" : "string",
          "description" : "username for SASL authentication"
        },
        "password" : {
          "type" : "string",
          "description" : "password for SASL authentication"
        },
        "sasl" : {
          "type" : "boolean",
          "description" : "enable or disable SASL authentication"
        }
      }
    },
    "filter" : {
      "properties" : {
        "rules" : {
          "type" : "array",
          "description" : "delay filters for tenant",
          "items" : {
            "$ref" : "#/definitions/rule"
          }
        },
        "versions" : {
          "type" : "array",
          "description" : "abort filters for tenant",
          "items" : {
            "$ref" : "#/definitions/version"
          }
        }
      }
    },
    "rule" : {
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "Service name of request source"
        },
        "destination" : {
          "type" : "string",
          "description" : "Service name of request destination"
        },
        "pattern" : {
          "type" : "string",
          "description" : "Header pattern"
        },
        "delay" : {
          "type" : "number",
          "description" : "Delay in seconds"
        },
        "delay_probability" : {
          "type" : "number",
          "description" : "Delay probability in range [0.0, 1.0]"
        },
        "abort_probability" : {
          "type" : "number",
          "description" : "Abort probability in range [0.0, 1.0]"
        },
        "return_code" : {
          "type" : "integer",
          "description" : "Failure code returned by abort"
        }
      }
    },
    "version" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "description" : "Service to apply versioning to"
        },
        "default" : {
          "type" : "string",
          "description" : "Default Service version to use"
        },
        "selector" : {
          "type" : "string",
          "description" : "TODO FIXME - struct will be changing soon"
        }
      }
    }
  }
}
