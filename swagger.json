{
  "swagger" : "2.0",
  "info" : {
    "description" : "FIXME: this is completely out of date",
    "version" : "1.0.0",
    "title" : "Controller API for Amalgam8"
  },
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json", "text/plain" ],
  "paths" : {
    "/health" : {
      "parameters" : [ ],
      "get" : {
        "tags" : [ ],
        "summary" : "Status of service",
        "description" : "Returns status of current service based upon status of its dependent services",
        "responses" : {
          "200" : {
            "description" : "Service and its dependencies are healthy"
          }
        }
      }
    },
    "/v1/poll" : {
      "parameters" : [ ],
      "post" : {
        "tags" : [ ],
        "summary" : "Poll Regsitry",
        "description" : "Performs a poll of Regsitry for each registered tenant for changes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully polled Registry for all tenants"
          },
          "500" : {
            "description" : "Failed to poll Registry for one or more tenants"
          }
        }
      }
    },
    "/v1/tenants/" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Create a tenant",
        "description" : "Initializes a tenant entry in the Controller",
        "parameters" : [
          {
            "name": "tenant_info",
            "in": "body",
            "description": "New info for tenant",
            "schema": {
              "$ref": "#/definitions/TenantInfo"
            },
            "required": true
          }
        ],
        "responses" : {
          "201" : {
            "description" : "Tenant entry created"
          },
          "400" : {
            "description" : "Missing or invalid JSON in request body"
          },
          "409" : {
            "description" : "Entry already exists for tenant"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },
    "/v1/tenants/{id}" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        }
      ],
      "delete" : {
        "tags" : [ ],
        "summary" : "Deletes a tenant",
        "description" : "Deletes a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Tenant successfully deleted"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "get" : {
        "tags" : [ ],
        "summary" : "Credentials and configuration of a tenant",
        "description" : "Returns the credentials and configuration of a tenant",
        "responses" : {
          "200" : {
            "description" : "Canonical info of tenant",
            "schema" : {
              "$ref" : "#/definitions/TenantInfo"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Change the info of a tenant",
        "description" : "Changes the canonical info of a tenant",
        "parameters" : [
          {
            "name": "tenant_info",
            "in": "body",
            "description": "New info for tenant",
            "schema": {
              "$ref": "#/definitions/TenantInfo"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Tenant info successfully updated"
          },
          "400" : {
            "description" : "Malformed JSON in request"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },

    "/v1/tenants/{id}/filters" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        }
      ],
      "delete" : {
        "tags" : [ ],
        "summary" : "Deletes the filters for a tenant",
        "description" : "Deletes the filters for a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted filters"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "get" : {
        "tags" : [ ],
        "summary" : "Returns the filters for a tenant",
        "description" : "Returns the filters for a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved filters",
            "schema" : {
              "$ref" : "#/definitions/Rules"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "post" : {
        "tags" : [ ],
        "summary" : "Create a service version filter for a tenant",
        "description" : "Creates a version filter for a tenant for a service",
        "parameters" : [
          {
            "name": "filters",
            "in": "body",
            "description": "New version filter for tenant",
            "schema": {
              "$ref": "#/definitions/Rules"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully created version filter",
            "schema": {
              "$ref": "#/definitions/Rules"
            }
          },
          "400" : {
            "description" : "Missing or invalid JSON"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },
    "/v1/tenants/{id}/filters/{filter}" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        },
        {
          "name": "filter",
          "in": "path",
          "description": "Filter ID",
          "type": "string",
          "required": true
        }
      ],
      "delete" : {
        "tags" : [ ],
        "summary" : "Deletes a filter for a tenant",
        "description" : "Deletes the filters for a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted filter"
          },
          "404" : {
            "description" : "No information exists for tenant ID or filter ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "get" : {
        "tags" : [ ],
        "summary" : "Returns a filter for a tenant",
        "description" : "Returns a filter for a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved filter",
            "schema" : {
              "$ref" : "#/definitions/RuleEntry"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID or filter ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Update a filter for a tenant",
        "description" : "Updates a filter for a tenant",
        "parameters" : [
          {
            "name": "filter",
            "in": "body",
            "description": "Updated filter for tenant",
            "schema": {
              "$ref": "#/definitions/RuleEntry"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated filter",
            "schema": {
              "$ref": "#/definitions/RuleEntry"
            }
          },
          "400" : {
            "description" : "Missing or invalid JSON"
          },
          "404" : {
            "description" : "No information exists for tenant ID or filter ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },
    "/v1/tenants/{id}/nginx" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        }
      ],
      "get" : {
        "produces" : [ "text/plain" ],
        "tags" : [ ],
        "summary" : "Proxy configuration of a tenant",
        "description" : "Returns the proxy configuration for a given tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Proxy configuration of tenant"
          },
          "204" : {
            "description" : "No configuration changes"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "500" : {
            "description" : "Error generating configuration"
          },
          "503" : {
            "description" : "Error communicating with external service"
          }
        }
      }
    },


    "/v1/tenants/{id}/versions/{service}" : {
      "parameters" : [
        {
          "name": "id",
          "in": "path",
          "description": "Tenant ID",
          "type": "string",
          "required": true
        },
        {
          "name": "service",
          "in": "path",
          "description": "Service Name",
          "type": "string",
          "required": true
        }
      ],
      "delete" : {
        "tags" : [ ],
        "summary" : "Deletes the service version filter for a tenant",
        "description" : "Deletes the version filter for a tenant for a service",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted version filter"
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "get" : {
        "tags" : [ ],
        "summary" : "Returns the service version filter for a tenant",
        "description" : "Returns the version filter for a tenant for a service",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved version filter",
            "schema" : {
              "$ref" : "#/definitions/Version"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Create a service version filter for a tenant",
        "description" : "Creates a version filter for a tenant for a service",
        "parameters" : [
          {
            "name": "version",
            "in": "body",
            "description": "New version filter for tenant",
            "schema": {
              "$ref": "#/definitions/Version"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully created version filter"
          },
          "400" : {
            "description" : "Missing or invalid JSON"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    }
  },
  "definitions" : {
    "TenantInfo" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID for tenant"
        },
        "port" : {
          "type" : "integer",
          "description" : "Port for NGINX running on tenant"
        },
        "load_balance" : {
          "type" : "string",
          "description" : "Load balancing algorithm for tenant"
        },
        "req_tracking_header" : {
          "type" : "string",
          "description" : "Tracking header for tenant"
        },
        "credentials" : {
          "$ref" : "#/definitions/Credentials"
        },
        "filters" : {
          "$ref" : "#/definitions/Filter"
        }
      }
    },
    "Credentials" : {
      "properties" : {
        "kafka" : {
          "$ref" : "#/definitions/Kafka"
        },
        "registry" : {
          "$ref" : "#/definitions/Registry"
        }
      }
    },
    "Registry" : {
      "properties" : {
        "url" : {
          "type" : "string",
          "description" : "url for Registry"
        },
        "token" : {
          "type" : "string",
          "description" : "token for Registry"
        }
      }
    },
    "Kafka" : {
      "properties" : {
        "api_key" : {
          "type" : "string",
          "description" : "token for Kafka REST API"
        },
        "admin_url" : {
          "type" : "string",
          "description" : "url for Kafka admin url"
        },
        "rest_url" : {
          "type" : "string",
          "description" : "url for Kafka REST url"
        },
        "brokers" : {
          "type" : "array",
          "description" : "Kafka brokers",
          "items" : {
            "type" : "string"
          }
        },
        "user" : {
          "type" : "string",
          "description" : "username for SASL authentication"
        },
        "password" : {
          "type" : "string",
          "description" : "password for SASL authentication"
        },
        "sasl" : {
          "type" : "boolean",
          "description" : "enable or disable SASL authentication"
        }
      }
    },
    "Filter" : {
      "properties" : {
        "rules" : {
          "type" : "array",
          "description" : "delay filters for tenant",
          "items" : {
            "$ref" : "#/definitions/Rule"
          }
        },
        "aborts" : {
          "type" : "array",
          "description" : "abort filters for tenant",
          "items" : {
            "$ref" : "#/definitions/Version"
          }
        }
      }
    },
    "Rule" : {
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "Service name of request source"
        },
        "destination" : {
          "type" : "string",
          "description" : "Service name of request destination"
        },
        "header" : {
          "type" : "string",
          "description" : "Request tracking header for tenant - DEPRECIATED - REMOVE ME"
        },
        "pattern" : {
          "type" : "string",
          "description" : "Header pattern"
        },
        "delay" : {
          "type" : "number",
          "description" : "Delay in ms"
        },
        "delay_probability" : {
          "type" : "number",
          "description" : "Probability between 0 and 1 of delay to occur"
        },
        "abort_probability" : {
          "type" : "number",
          "description" : "Probability between 0 and 1 of abort to occur"
        },
        "return_code" : {
          "type" : "integer",
          "description" : "Failure code returned by abort"
        }
      }
    },
    "Rules" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/RuleEntry"
      }
    },
    "RuleEntry" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of rule"
        },
        "source" : {
          "type" : "string",
          "description" : "Service name of request source"
        },
        "destination" : {
          "type" : "string",
          "description" : "Service name of request destination"
        },
        "header" : {
          "type" : "string",
          "description" : "Request tracking header for tenant - DEPRECIATED - REMOVE ME"
        },
        "pattern" : {
          "type" : "string",
          "description" : "Header pattern"
        },
        "delay" : {
          "type" : "number",
          "description" : "Delay in ms"
        },
        "delay_probability" : {
          "type" : "number",
          "description" : "Probability between 0 and 1 of delay to occur"
        },
        "abort_probability" : {
          "type" : "number",
          "description" : "Probability between 0 and 1 of abort to occur"
        },
        "return_code" : {
          "type" : "integer",
          "description" : "Failure code returned by abort"
        }
      }
    },
    "Version" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "description" : "Service to apply versioning to"
        },
        "default" : {
          "type" : "string",
          "description" : "Default Service version to use"
        },
        "selector" : {
          "type" : "string",
          "description" : "TODO FIXME - struct will be changing soon"
        }
      }
    }
  }
}