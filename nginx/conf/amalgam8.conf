lua_package_path "/opt/a8_lualib/?.lua;/usr/local/openresty/lualib/?.lua;";

lua_shared_dict upstreams_dict  5m;
lua_shared_dict faults_dict  5m;
lua_shared_dict services_dict  1m;

init_by_lua_block {
   require("resty.core")
   Amalgam8=require("amalgam8")
   amalgam8 = Amalgam8:new("upstreams_dict", "services_dict", "faults_dict")
   version_routing = require("version_routing")
   fault_injection = require("fault_injection")
}

### AMALGAM8 admin API
map $http_upgrade $connection_upgrade {
  default '';
  websocket upgrade;
}

map $status $loggable {
 ~^[23]  0;
 default 1;
}

log_format  a8log  '{'
                '"message":"$request $status",'
                '"module":"NGINX",'
                '"upstream_addr":"$upstream_addr",'
                '"remote_addr":"$remote_addr",'
                '"request":"$request",'
                '"status":"$status",'
                '"http_referer":"$http_referer",'
                '"http_user_agent": "$http_user_agent",'
                '"http_x_forwarded_for":"$http_x_forwarded_for",'
                '"timestamp_in_ms":"$msec",'
                '"request_time":"$request_time",'
                '"upstream_response_time":"$upstream_response_time",'
                '"gremlin_header_name":"$gremlin_header_name",'
                '"gremlin_header_val":"$gremlin_header_val",'
                '"src": "$source_service",'
                '"dst": "$a8proxy_upstream"'
               '}';

server {
   listen 5813;
   server_name a8_admin;

   location / {
      return 404;
   }

   location /a8-admin {
     content_by_lua_block {
         amalgam8:updateConfig()
     }
     access_log /var/log/nginx/a8_access.log a8log if=$loggable;
   }
}

### Application proxy
server {
       listen 6379;

       location ~ ^/(?<service_name>.*?)/(?<reqpath>.*) {
         set_by_lua_block $source_service { return amalgam8:get_source_service() }
       	 set $a8proxy_upstream nil;
         set $gremlin_header_name nil;
         set $gremlin_header_val nil;
         set $service_type 'http';
         access_by_lua_block {
            local stype, default_version, version_selectors = amalgam8:get_service_metadata();
            if not default_version and not version_selectors then
               ngx.exit(404)
            end
            ngx.var.service_type = stype
            ngx.var.a8proxy_upstream = version_routing.get_target(ngx.var.service_name, default_version, version_selectors)
            fault_injection.inject_faults(ngx.var.a8proxy_upstream, amalgam8.faults_dict)
         }
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection $connection_upgrade;
         ## TODO: Add proxy ssl vertification directives here.
         proxy_pass $service_type://a8_upstreams/$reqpath$is_args$args;
       }
       access_log /var/log/nginx/a8_access.log a8log;
}

upstream a8_upstreams {
    server 127.0.0.1:1;
    balancer_by_lua_block {
       amalgam8:balance()
    }
   keepalive 64;
}
